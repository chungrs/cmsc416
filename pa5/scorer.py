"""
Programming Assignment 5 - Sentiment Analysis - Scorer

Roy Chung
20210420
CMSC 416-001

scorer.py is a program that accompanies scorer.py, a program that takes as input a training file containing tweets
tagged with their respective sentiments, which are either positive or negative.
This program compares the output file generated by sentiment.py against a key, calculating the accuracy of the program.
In addition, it also generates a confusion matrix.

Scorer program should be run as follows:
python3 scorer.py my-sentiment-answers.txt sentiment-key.txt

replace my-sentiment-answers.txt with the name of the output text file from sentiment.py and sentiment-key.txt with the
name of the answer key file. Both should be in the same directory as sentiment.py

"""

from sys import argv
import pandas as pd
import re


# Reads text files and returns them as a string list with brackets removed
def import_data(filename):
    output = ""
    with open(filename, 'r') as data:
        output += data.read()
    return output.splitlines()


def create_array(pair_list):
    output_array = []
    for tweet_sentiment_pair in pair_list:
        match = re.search(r'answer instance="(.*)" sentiment="(.*)"', tweet_sentiment_pair)
        if match:
            output_array.append(match.group(2))
    return output_array


# Calculate score
def scorer(prediction, key):
    match = 0
    total = len(key)  # Denominator is the number of tagged pairs

    # Iterate through key array, if there's a match with prediction array, then iterate match
    #
    for i in range(len(key)):
        if prediction[i] == key[i]:
            match += 1

    return match / total


def create_confusion_matrix(prediction, key):
    y_actual = pd.Series(key, name="Actual Sentiment")
    x_prediction = pd.Series(prediction, name="Predicted Sentiment")

    # These four settings make Panda display the whole matrix
    pd.set_option('display.max_rows', None)
    pd.set_option('display.max_columns', None)
    pd.set_option('display.width', None)
    pd.set_option('display.max_colwidth', None)

    return pd.crosstab(y_actual, x_prediction)


def write_to_file(score, matrix, filename):
    with open(filename, "w") as output_file:
        output_file.write("The accuracy of wsd.py is: " + str.format('{0:.2f}', score) + "%.\n\n" + matrix.to_string())

    return None


# Prints error message for improper command line arguments
def print_error():
    print('Invalid arguments. Please enter properly formatted arguments.')


def main():
    # Print error and exit if training and test files are not specified in the command line
    if len(argv) < 3:
        print_error()
        exit()

    prediction_array = create_array(import_data(argv[1]))
    actual_array = create_array(import_data(argv[2]))
    # print(prediction_array)

    score = scorer(prediction_array, actual_array) * 100
    confusion_matrix = create_confusion_matrix(prediction_array, actual_array)

    print("The accuracy of sentiment.py is: " + str.format('{0:.2f}', score) + "%.\n\nConfusion Matrix:\n")
    print(confusion_matrix)


if __name__ == "__main__":
    main()
